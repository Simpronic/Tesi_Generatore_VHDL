# -*- coding: utf-8 -*-
"""Analisi_Tempi_di_valutazione.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SSRKwEoagssu43yJotTqtLJ5SOrpyxaj

Appunti sul formato:

Per il file di Analsi abbiamo che parte dall'indice 2 (se guardato dall'excel) invece qui parte dall'indice 0

Quindi da 0-1 va aggiunto 2
Dal 2 in poi va sottratto 2
"""

import pandas as pd
from datetime import datetime

def time_to_ms(time):
  time_obj = datetime.strptime(time, "%H:%M:%S")
  total_ms = (time_obj.hour * 3600 + time_obj.minute * 60 + time_obj.second) * 1000
  return total_ms

def max_elab_time_and_rows(analisis_df):
  elab_time_max = df["Time"].max()
  rows = df[df["Time"] == elab_time_max]["Righe"]
  return elab_time_max, rows

file_path = "Tempi_di_valutazione_CodeGen.csv"
df = pd.read_csv(file_path, header=None, names=['Righe', 'Time'], quotechar='"')

print(df)

times = [time_to_ms(time) for time in df["Time"]]
df["Time"] = times
print(df["Time"])

print(df)

df_Analisi = pd.read_excel("AnalisiCodeGen.xlsx")

elab_time_max,rows = max_elab_time_and_rows(df)

print(elab_time_max)
print(rows[0])

rows = rows[0].split(",")

rows = [int(r) for r in rows]

for row in rows:
  print(df_Analisi["IN"][row-2])

"""Sezione dove analizzo l'aggiunte di blocchi di RAM/ROM a caso"""

CodeT5xlsx = "AnalisiCodeT5_225.xlsx"
CodeGenxlsx = "AnalisiCodeGen.xlsx"

df_code_T5 = pd.read_excel(CodeT5xlsx)
df_code_gen = pd.read_excel(CodeGenxlsx)

filtro_CodeGen =  df_code_gen[df_code_gen["HYPS"].str.contains('ROM|RAM', case=False, na=False)]
filtro_CodeT5 =  df_code_T5[df_code_T5["HYPS"].str.contains('ROM|RAM', case=False, na=False)]

#Tolgo le istanze dove mi Ã¨ richiesta esplicitamente una ROM/RAM

filtro_CodeGen2 = filtro_CodeGen[~filtro_CodeGen["IN"].str.contains('ROM|RAM', case=False, na=False)]
filtro_CodeT52 = filtro_CodeT5[~filtro_CodeT5["IN"].str.contains('ROM|RAM', case=False, na=False)]

print(len(filtro_CodeGen2["HYPS"]))
print(len(filtro_CodeT52["HYPS"]))

"""Analisi di correlazione con le varie metriche"""

from scipy.stats import spearmanr, kendalltau

metrics_name = ["EM_M","ED_M","METEOR_M"]

file_to_analize = "AnalisiCodeGen.xlsx"
df_corr_file = pd.read_excel(file_to_analize)

HE_M = df_corr_file["HUMAN_E"]

for metric in metrics_name:
  print(f"Analizyng {metric}...")
  spearman_corr, spearman_p_value = spearmanr(HE_M, df_corr_file[metric])
  kendall_corr, kendall_p_value = kendalltau(HE_M, df_corr_file[metric])

  print("Spearman Correlation:", spearman_corr)
  print("Spearman P-value:", spearman_p_value)

  print("Kendall Correlation:", kendall_corr)
  print("Kendall P-value:", kendall_p_value)

  print("\n\n")

input_prompt = []

with open("data.in", "r") as file:
    # Leggi il file riga per riga
    for linea in file:
        # Rimuove eventuali spazi bianchi (come newline) alla fine della riga
        linea = linea.strip()
        input_prompt.append(linea)

category_distr = []

with open("categories_distrib-new.txt", "r") as file:
    # Leggi il file riga per riga
    for linea in file:
        # Rimuove eventuali spazi bianchi (come newline) alla fine della riga
        linea = linea.strip()
        category_distr.append(linea)

df = pd.DataFrame()
df["Prompt"] = input_prompt
df["Category"] = category_distr

df.to_excel("DataInCateg.xlsx",index=False)

"""Crea il test file con le categorie"""

test_in_data = []

with open("vhdl-test.in", "r") as file:
    # Leggi il file riga per riga
    for linea in file:
        # Rimuove eventuali spazi bianchi (come newline) alla fine della riga
        linea = linea.strip()
        test_in_data.append(linea)

category_data_for_test = [0] * len(test_in_data)

print(df.loc[df["Prompt"] == "use of std_logic library"].index.tolist())

for i in range(len(test_in_data)):
  category_data_for_test[i] = df["Category"][df.loc[df["Prompt"] == test_in_data[i]].index.tolist()].to_list()[0]

df_test_in = pd.DataFrame()
df_test_in["Prompt"] = test_in_data
df_test_in["Category"] = category_data_for_test

print(df_test_in)

df_test_in.to_excel("TestInCateg.xlsx",index=False)

!pip install pylcs

import pylcs
import pandas as pd

def calc_lcs(hyps, refs):
	print("##### LCS #####\n")
	scores = []
	for hyp, ref in zip(hyps, refs):
		tmp = pylcs.lcs_sequence_length(hyp, ref)
		res_norm = tmp/max(len(hyp),len(ref))
		#print(res_norm)
		scores.append(str(res_norm))
	return scores

req_path = "vhdl-test.in"
refs_path = "vhdl-test.out"
model_output_path = "hyps.txt"
excel_name = "CodeT5.xlsx"
df = pd.DataFrame()
in_text = []
refs_text = []
hyps_text = []
with open(req_path, 'r') as file:
    line = file.readline().strip()
    while line:
        in_text.append(line)
        line = file.readline().strip()
with open(refs_path, 'r') as file:
    line = file.readline().strip()
    while line:
        refs_text.append(line)
        line = file.readline().strip()
with open(model_output_path, 'r') as file:
    line = file.readline().strip()
    while line:
        hyps_text.append(line)
        line = file.readline().strip()

df['IN'] = in_text
df['REFS'] = refs_text
df['HYPS'] = hyps_text
df['LCS_M'] = calc_lcs(hyps_text,refs_text)
df.to_excel(excel_name,index=False)